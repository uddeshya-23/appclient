{"version":3,"sources":["serviceWorker.js","context/auth.js","util/AuthRoute.js","components/MenuBar.js","util/MyPopup.js","components/LikeButton.js","util/graphql.js","components/DeleteButton.js","components/PostCard.js","util/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/Register.js","pages/SinglePost.js","App.js","ApolloProvider.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","AuthRoute","Component","component","rest","useContext","render","to","MenuBar","pathname","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","size","color","Item","username","active","as","Link","position","onClick","MyPopup","content","children","Popup","inverted","trigger","LIKE_POST_MUTATION","gql","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","useMutation","variables","postId","likePost","likeButton","Button","Icon","basic","labelPosition","Label","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","getPosts","filter","p","writeQuery","deletePostOrMutation","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","src","Header","Meta","moment","fromNow","Description","extra","useForm","values","setValues","onChange","event","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","error","Form","Field","Input","placeholder","className","marginBottom","graphQLErrors","message","Home","useQuery","loading","posts","Grid","columns","Row","Column","Transition","Group","map","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","_","history","push","onError","err","extensions","exception","noValidate","label","primary","Object","keys","length","REGISTER_USER","Register","addUser","email","confirmPassword","register","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkup","params","commentInputRef","useRef","comment","setComment","getPost","current","blur","submitComment","comments","width","float","console","log","ref","disabled","trim","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9327818f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React, { useReducer, createContext } from 'react';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst initialState = {\r\n  user: null\r\n};\r\n\r\nif (localStorage.getItem('jwtToken')) {\r\n  const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\r\n\r\n  if (decodedToken.exp * 1000 < Date.now()) {\r\n    localStorage.removeItem('jwtToken');\r\n  } else {\r\n    initialState.user = decodedToken;\r\n  }\r\n}\r\n\r\nconst AuthContext = createContext({\r\n  user: null,\r\n  login: (userData) => {},\r\n  logout: () => {}\r\n});\r\n\r\nfunction authReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'LOGIN':\r\n      return {\r\n        ...state,\r\n        user: action.payload\r\n      };\r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        user: null\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction AuthProvider(props) {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  function login(userData) {\r\n    localStorage.setItem('jwtToken', userData.token);\r\n    dispatch({\r\n      type: 'LOGIN',\r\n      payload: userData\r\n    });\r\n  }\r\n\r\n  function logout() {\r\n    localStorage.removeItem('jwtToken');\r\n    dispatch({ type: 'LOGOUT' });\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ user: state.user, login, logout }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { AuthContext, AuthProvider };","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport { AuthContext } from '../context/auth';\n\nfunction AuthRoute({ component: Component, ...rest }) {\n  const { user } = useContext(AuthContext);\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        user ? <Redirect to=\"/\" /> : <Component {...props} />\n      }\n    />\n  );\n}\n\nexport default AuthRoute;\n","import React, { useContext, useState } from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\nfunction MenuBar() {\r\n  const { user, logout } = useContext(AuthContext);\r\n  const pathname = window.location.pathname;\r\n\r\n  const path = pathname === '/' ? 'home' : pathname.substr(1);\r\n  const [activeItem, setActiveItem] = useState(path);\r\n\r\n  const handleItemClick = (e, { name }) => setActiveItem(name);\r\n\r\n  const menuBar = user ? (\r\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n      <Menu.Item name={user.username} active as={Link} to=\"/\" />\r\n\r\n      <Menu.Menu position=\"right\">\r\n        <Menu.Item name=\"logout\" onClick={logout} />\r\n      </Menu.Menu>\r\n    </Menu>\r\n  ) : (\r\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n      <Menu.Item\r\n        name=\"home\"\r\n        active={activeItem === 'home'}\r\n        onClick={handleItemClick}\r\n        as={Link}\r\n        to=\"/\"\r\n      />\r\n\r\n      <Menu.Menu position=\"right\">\r\n        <Menu.Item\r\n          name=\"login\"\r\n          active={activeItem === 'login'}\r\n          onClick={handleItemClick}\r\n          as={Link}\r\n          to=\"/login\"\r\n        />\r\n        <Menu.Item\r\n          name=\"register\"\r\n          active={activeItem === 'register'}\r\n          onClick={handleItemClick}\r\n          as={Link}\r\n          to=\"/register\"\r\n        />\r\n      </Menu.Menu>\r\n    </Menu>\r\n  );\r\n\r\n  return menuBar;\r\n}\r\n\r\nexport default MenuBar;","import { Popup } from 'semantic-ui-react';\nimport React from 'react';\n\nfunction MyPopup({ content, children }) {\n  return <Popup inverted content={content} trigger={children} />;\n}\n\nexport default MyPopup;\n","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport { Button, Label, Icon } from 'semantic-ui-react';\r\n\r\nimport MyPopup from '../util/MyPopup';\r\n\r\nfunction LikeButton({ user, post: { id, likeCount, likes } }) {\r\n  const [liked, setLiked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user && likes.find((like) => like.username === user.username)) {\r\n      setLiked(true);\r\n    } else setLiked(false);\r\n  }, [user, likes]);\r\n\r\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n    variables: { postId: id }\r\n  });\r\n\r\n  const likeButton = user ? (\r\n    liked ? (\r\n      <Button color=\"teal\">\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    ) : (\r\n      <Button color=\"teal\" basic>\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    )\r\n  ) : (\r\n    <Button as={Link} to=\"/login\" color=\"teal\" basic>\r\n      <Icon name=\"heart\" />\r\n    </Button>\r\n  );\r\n\r\n  return (\r\n    <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\r\n      <MyPopup content={liked ? 'Unlike' : 'Like'}>{likeButton}</MyPopup>\r\n      <Label basic color=\"teal\" pointing=\"left\">\r\n        {likeCount}\r\n      </Label>\r\n    </Button>\r\n  );\r\n}\r\n\r\nconst LIKE_POST_MUTATION = gql`\r\n  mutation likePost($postId: ID!) {\r\n    likePost(postId: $postId) {\r\n      id\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      likeCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport default LikeButton;","import gql from 'graphql-tag';\n\nexport const FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Button, Confirm, Icon } from 'semantic-ui-react';\r\n\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\r\nimport MyPopup from '../util/MyPopup';\r\n\r\nfunction DeleteButton({ postId, commentId, callback }) {\r\n  const [confirmOpen, setConfirmOpen] = useState(false);\r\n\r\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\r\n\r\n  const [deletePostOrMutation] = useMutation(mutation, {\r\n    update(proxy) {\r\n      setConfirmOpen(false);\r\n      if (!commentId) {\r\n        const data = proxy.readQuery({\r\n          query: FETCH_POSTS_QUERY\r\n        });\r\n        data.getPosts = data.getPosts.filter((p) => p.id !== postId);\r\n        proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\r\n      }\r\n      if (callback) callback();\r\n    },\r\n    variables: {\r\n      postId,\r\n      commentId\r\n    }\r\n  });\r\n  return (\r\n    <>\r\n      <MyPopup content={commentId ? 'Delete comment' : 'Delete post'}>\r\n        <Button\r\n          as=\"div\"\r\n          color=\"red\"\r\n          floated=\"right\"\r\n          onClick={() => setConfirmOpen(true)}\r\n        >\r\n          <Icon name=\"trash\" style={{ margin: 0 }} />\r\n        </Button>\r\n      </MyPopup>\r\n      <Confirm\r\n        open={confirmOpen}\r\n        onCancel={() => setConfirmOpen(false)}\r\n        onConfirm={deletePostOrMutation}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nconst DELETE_POST_MUTATION = gql`\r\n  mutation deletePost($postId: ID!) {\r\n    deletePost(postId: $postId)\r\n  }\r\n`;\r\n\r\nconst DELETE_COMMENT_MUTATION = gql`\r\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\r\n    deleteComment(postId: $postId, commentId: $commentId) {\r\n      id\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport default DeleteButton;","import React, { useContext } from 'react';\r\nimport { Button, Card, Icon, Label, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport LikeButton from './LikeButton';\r\nimport DeleteButton from './DeleteButton';\r\nimport MyPopup from '../util/MyPopup';\r\n\r\n\r\nfunction PostCard({\r\n  post: { body, createdAt, id, username, likeCount, commentCount, likes }\r\n}) {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Card fluid>\r\n      <Card.Content>\r\n        <Image\r\n          floated=\"right\"\r\n          size=\"mini\"\r\n          src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n        />\r\n        <Card.Header>{username}</Card.Header>\r\n        <Card.Meta as={Link} to={`/posts/${id}`}>\r\n          {moment(createdAt).fromNow(true)}\r\n        </Card.Meta>\r\n        <Card.Description>{body}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <LikeButton user={user} post={{ id, likes, likeCount }} />\r\n        <MyPopup content=\"Comment on post\">\r\n          <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\r\n            <Button color=\"blue\" basic>\r\n              <Icon name=\"comments\" />\r\n            </Button>\r\n            <Label basic color=\"blue\" pointing=\"left\">\r\n              {commentCount}\r\n            </Label>\r\n          </Button>\r\n        </MyPopup>\r\n        {user && user.username === username && <DeleteButton postId={id} />}\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default PostCard;","import { useState } from 'react';\n\nexport const useForm = (callback, initialState = {}) => {\n  const [values, setValues] = useState(initialState);\n\n  const onChange = (event) => {\n    setValues({ ...values, [event.target.name]: event.target.value });\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    callback();\n  };\n\n  return {\n    onChange,\n    onSubmit,\n    values\n  };\n};\n","import React from 'react';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\nimport { useForm } from '../util/hooks';\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\r\n\r\nfunction PostForm() {\r\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\r\n    body: ''\r\n  });\r\n\r\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\r\n    variables: values,\r\n    update(proxy, result) {\r\n      const data = proxy.readQuery({\r\n        query: FETCH_POSTS_QUERY\r\n      });\r\n      data.getPosts = [result.data.createPost, ...data.getPosts];\r\n      proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\r\n      values.body = '';\r\n    }\r\n  });\r\n\r\n  function createPostCallback() {\r\n    createPost();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={onSubmit}>\r\n        <h2>Create a post:</h2>\r\n        <Form.Field>\r\n          <Form.Input\r\n            placeholder=\"Hi World!\"\r\n            name=\"body\"\r\n            onChange={onChange}\r\n            value={values.body}\r\n            error={error ? true : false}\r\n          />\r\n          <Button type=\"submit\" color=\"teal\">\r\n            Submit\r\n          </Button>\r\n        </Form.Field>\r\n      </Form>\r\n      {error && (\r\n        <div className=\"ui error message\" style={{ marginBottom: 20 }}>\r\n          <ul className=\"list\">\r\n            <li>{error.graphQLErrors[0].message}</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst CREATE_POST_MUTATION = gql`\r\n  mutation createPost($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likes {\r\n        id\r\n        username\r\n        createdAt\r\n      }\r\n      likeCount\r\n      comments {\r\n        id\r\n        body\r\n        username\r\n        createdAt\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport default PostForm;","import React, { useContext } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Grid, Transition } from 'semantic-ui-react';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport PostCard from '../components/PostCard';\r\nimport PostForm from '../components/PostForm';\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\r\n\r\nfunction Home() {\r\n  const { user } = useContext(AuthContext);\r\n  const {\r\n    loading,\r\n    data: { getPosts: posts }\r\n   ={} } = useQuery(FETCH_POSTS_QUERY);\r\n\r\n  return (\r\n    <Grid columns={3}>\r\n      <Grid.Row className=\"page-title\">\r\n        <h1>Recent Posts</h1>\r\n      </Grid.Row>\r\n      <Grid.Row>\r\n        {user && (\r\n          <Grid.Column>\r\n            <PostForm />\r\n          </Grid.Column>\r\n        )}\r\n        {loading ? (\r\n          <h1>Loading posts..</h1>\r\n        ) : (\r\n          <Transition.Group>\r\n            {posts &&\r\n              posts.map((post) => (\r\n                <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\r\n                  <PostCard post={post} />\r\n                </Grid.Column>\r\n              ))}\r\n          </Transition.Group>\r\n        )}\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;","import React, { useContext, useState } from 'react';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport { useForm } from '../util/hooks';\r\n\r\nfunction Login(props) {\r\n  const context = useContext(AuthContext);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const { onChange, onSubmit, values } = useForm(loginUserCallback, {\r\n    username: '',\r\n    password: ''\r\n  });\r\n\r\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\r\n    update(\r\n      _,\r\n      {\r\n        data: { login: userData }\r\n      }\r\n    ) {\r\n      context.login(userData);\r\n      props.history.push('/');\r\n    },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n    },\r\n    variables: values\r\n  });\r\n\r\n  function loginUserCallback() {\r\n    loginUser();\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\r\n        <h1>Login</h1>\r\n        <Form.Input\r\n          label=\"Username\"\r\n          placeholder=\"Username..\"\r\n          name=\"username\"\r\n          type=\"text\"\r\n          value={values.username}\r\n          error={errors.username ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Password\"\r\n          placeholder=\"Password..\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={values.password}\r\n          error={errors.password ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Login\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors).length > 0 && (\r\n        <div className=\"ui error message\">\r\n          <ul className=\"list\">\r\n            {Object.values(errors).map((value) => (\r\n              <li key={value}>{value}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst LOGIN_USER = gql`\r\n  mutation login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Login;","import React, { useContext, useState } from 'react';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport { useForm } from '../util/hooks';\r\n\r\nfunction Register(props) {\r\n  const context = useContext(AuthContext);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const { onChange, onSubmit, values } = useForm(registerUser, {\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: ''\r\n  });\r\n\r\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n    update(\r\n      _,\r\n      {\r\n        data: { register: userData }\r\n      }\r\n    ) {\r\n      context.login(userData);\r\n      props.history.push('/');\r\n    },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n    },\r\n    variables: values\r\n  });\r\n\r\n  function registerUser() {\r\n    addUser();\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\r\n        <h1>Register</h1>\r\n        <Form.Input\r\n          label=\"Username\"\r\n          placeholder=\"Username..\"\r\n          name=\"username\"\r\n          type=\"text\"\r\n          value={values.username}\r\n          error={errors.username ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Email\"\r\n          placeholder=\"Email..\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={values.email}\r\n          error={errors.email ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Password\"\r\n          placeholder=\"Password..\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={values.password}\r\n          error={errors.password ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Confirm Password\"\r\n          placeholder=\"Confirm Password..\"\r\n          name=\"confirmPassword\"\r\n          type=\"password\"\r\n          value={values.confirmPassword}\r\n          error={errors.confirmPassword ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Register\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors).length > 0 && (\r\n        <div className=\"ui error message\">\r\n          <ul className=\"list\">\r\n            {Object.values(errors).map((value) => (\r\n              <li key={value}>{value}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register(\r\n    $username: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        username: $username\r\n        email: $email\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n      }\r\n    ) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Register;","import React, { useContext, useState, useRef } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport moment from 'moment';\r\nimport {\r\n  Button,\r\n  Card,\r\n  Form,\r\n  Grid,\r\n  Image,\r\n  Icon,\r\n  Label\r\n} from 'semantic-ui-react';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport LikeButton from '../components/LikeButton';\r\nimport DeleteButton from '../components/DeleteButton';\r\nimport MyPopup from '../util/MyPopup';\r\n\r\nfunction SinglePost(props) {\r\n  const postId = props.match.params.postId;\r\n  const { user } = useContext(AuthContext);\r\n  const commentInputRef = useRef(null);\r\n\r\n  const [comment, setComment] = useState('');\r\n\r\n  const {\r\n    data: { getPost }\r\n   ={ } } = useQuery(FETCH_POST_QUERY, {\r\n    variables: {\r\n      postId\r\n    }\r\n  });\r\n\r\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\r\n    update() {\r\n      setComment('');\r\n      commentInputRef.current.blur();\r\n    },\r\n    variables: {\r\n      postId,\r\n      body: comment\r\n    }\r\n  });\r\n\r\n  function deletePostCallback() {\r\n    props.history.push('/');\r\n  }\r\n\r\n  let postMarkup;\r\n  if (!getPost) {\r\n    postMarkup = <p>Loading post..</p>;\r\n  } else {\r\n    const {\r\n      id,\r\n      body,\r\n      createdAt,\r\n      username,\r\n      comments,\r\n      likes,\r\n      likeCount,\r\n      commentCount\r\n    } = getPost;\r\n\r\n    postMarkup = (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column width={2}>\r\n            <Image\r\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n              size=\"small\"\r\n              float=\"right\"\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column width={10}>\r\n            <Card fluid>\r\n              <Card.Content>\r\n                <Card.Header>{username}</Card.Header>\r\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\r\n                <Card.Description>{body}</Card.Description>\r\n              </Card.Content>\r\n              <hr />\r\n              <Card.Content extra>\r\n                <LikeButton user={user} post={{ id, likeCount, likes }} />\r\n                <MyPopup content=\"Comment on post\">\r\n                  <Button\r\n                    as=\"div\"\r\n                    labelPosition=\"right\"\r\n                    onClick={() => console.log('Comment on post')}\r\n                  >\r\n                    <Button basic color=\"blue\">\r\n                      <Icon name=\"comments\" />\r\n                    </Button>\r\n                    <Label basic color=\"blue\" pointing=\"left\">\r\n                      {commentCount}\r\n                    </Label>\r\n                  </Button>\r\n                </MyPopup>\r\n                {user && user.username === username && (\r\n                  <DeleteButton postId={id} callback={deletePostCallback} />\r\n                )}\r\n              </Card.Content>\r\n            </Card>\r\n            {user && (\r\n              <Card fluid>\r\n                <Card.Content>\r\n                  <p>Post a comment</p>\r\n                  <Form>\r\n                    <div className=\"ui action input fluid\">\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Comment..\"\r\n                        name=\"comment\"\r\n                        value={comment}\r\n                        onChange={(event) => setComment(event.target.value)}\r\n                        ref={commentInputRef}\r\n                      />\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"ui button teal\"\r\n                        disabled={comment.trim() === ''}\r\n                        onClick={submitComment}\r\n                      >\r\n                        Submit\r\n                      </button>\r\n                    </div>\r\n                  </Form>\r\n                </Card.Content>\r\n              </Card>\r\n            )}\r\n            {comments.map((comment) => (\r\n              <Card fluid key={comment.id}>\r\n                <Card.Content>\r\n                  {user && user.username === comment.username && (\r\n                    <DeleteButton postId={id} commentId={comment.id} />\r\n                  )}\r\n                  <Card.Header>{comment.username}</Card.Header>\r\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\r\n                  <Card.Description>{comment.body}</Card.Description>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n  return postMarkup;\r\n}\r\n\r\nconst SUBMIT_COMMENT_MUTATION = gql`\r\n  mutation($postId: String!, $body: String!) {\r\n    createComment(postId: $postId, body: $body) {\r\n      id\r\n      comments {\r\n        id\r\n        body\r\n        createdAt\r\n        username\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nconst FETCH_POST_QUERY = gql`\r\n  query($postId: ID!) {\r\n    getPost(postId: $postId) {\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likeCount\r\n      likes {\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default SinglePost;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nimport { AuthProvider } from './context/auth';\nimport AuthRoute from './util/AuthRoute';\n\nimport MenuBar from './components/MenuBar';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport SinglePost from './pages/SinglePost';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Route exact path=\"/\" component={Home} />\n          <AuthRoute exact path=\"/login\" component={Login} />\n          <AuthRoute exact path=\"/register\" component={Register} />\n          <Route exact path=\"/posts/:postId\" component={SinglePost} />\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport App from './App';\r\nimport ApolloClient from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { setContext } from 'apollo-link-context';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: 'http://localhost:5000'\r\n});\r\n\r\nconst authLink = setContext(() => {\r\n  const token = localStorage.getItem('jwtToken');\r\n  return {\r\n    headers: {\r\n      Authorization: token ? `Bearer ${token}` : ''\r\n    }\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nexport default (\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>\r\n);","import ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloProvider from './ApolloProvider';\n\nReactDOM.render(ApolloProvider, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}